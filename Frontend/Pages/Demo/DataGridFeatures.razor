@page "/datagrid-features"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Domain.Entitäten
@using Domain.Models
@using Syncfusion.Blazor.Buttons
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType
@inject FoodstuffService Service

<h2>DataGrid</h2>
<br/>
<SfButton @ref="ToggleBtn" @onclick="OnToggleClick" CssClass="e-flat" IsToggle="true" IsPrimary="true" Content="Klick Me!"></SfButton>
<SfButton @onclick="@RefreshData" Content="Refresh"></SfButton>
<SfButton @onclick="@DeleteSelectedRecords" Content="Delete"></SfButton>
<br/>
<div id="meinGrid">
    <SfGrid Id="meinGrid" @ref="FoodGrid" DataSource="@Entities" Toolbar="@(new List<string> { "Add", "Edit", "Delete", "Cancel", "Update", "ExcelExport", "Search" })">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal" AllowEditOnDblClick="true"></GridEditSettings>
        <GridEvents OnToolbarClick="ToolbarKlick" TValue="FoodStuff"></GridEvents>
        <GridColumns>
            <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
            <GridColumn Field="@nameof(FoodStuff.Id)" HeaderText="Id" IsPrimaryKey="true" TextAlign="TextAlign.Right"></GridColumn>
            <GridColumn Field="@nameof(FoodStuff.Name)" HeaderText="Name" TextAlign="TextAlign.Right"></GridColumn>
            <GridColumn Field="@nameof(FoodStuff.Kcal)" HeaderText="Kcal" TextAlign="TextAlign.Right"></GridColumn>
            <GridColumn Field="@nameof(FoodStuff.Carbs)" HeaderText="Carbs" TextAlign="TextAlign.Right"></GridColumn>
            <GridColumn Field="@nameof(FoodStuff.Protein)" HeaderText="Protein" TextAlign="TextAlign.Right"></GridColumn>
            <GridColumn Field="@nameof(FoodStuff.Fett)" HeaderText="Fett" TextAlign="TextAlign.Right"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
<br/>
<div id="ControlRegion">
    <SfGrid ID="Grid" DataSource="@Orders" @ref="Grid" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true"
            AllowSorting="true" Toolbar="@(new List<string> { "Add", "Edit", "Delete", "Cancel", "Update", "ExcelExport", "Search" })" Height="315" Width="900">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>
        <GridFilterSettings Type="FilterType.FilterBar"></GridFilterSettings>
        <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="SelectionType.Multiple"></GridSelectionSettings>
        <GridEvents OnToolbarClick="ToolbarClick" TValue="Order"></GridEvents>
        <GridColumns>
            <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
            <GridColumn Field="@nameof(Order.OrderID)" HeaderText="Order ID" IsPrimaryKey="true" ValidationRules="@(new ValidationRules { Required = true })" TextAlign="TextAlign.Right" Width="120"></GridColumn>
            <GridColumn Field="@nameof(Order.CustomerID)" HeaderText="Customer Name" ValidationRules="@(new ValidationRules { Required = true })" Width="120"></GridColumn>
            <GridColumn Field="@nameof(Order.OrderDate)" HeaderText=" Order Date" EditType="EditType.DatePickerEdit" Format="d" TextAlign="TextAlign.Right" Width="130" Type="ColumnType.Date"></GridColumn>
            <GridColumn Field="@nameof(Order.Freight)" HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" EditType="EditType.NumericEdit" Width="120"></GridColumn>
            <GridColumn Field="@nameof(Order.ShipCountry)" HeaderText="Ship Country" EditType="EditType.DropDownEdit" Width="150"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
<br/>
<div>
    <h3>Selected Features:</h3>
    <ul class="ulstyle">
        <li class="list"> Exporting - Excel Export</li>
        <li class="list"> Grouping</li>
        <li class="list"> Sorting</li>
        <li class="list"> Filtering - Filter Bar</li>
        <li class="list"> Selection</li>
        <li class="list"> Reordering</li>
        <li class="list"> Paging</li>
        <li class="list"> Resizing</li>
        <li class="list"> Searching</li>
        <li class="list"> Checkbox Selection</li>
        <li class="list"> Editing - Normal</li>
        <li class="list"> Theme - Bootstrap v5</li>
    </ul>
</div>
<br/>
<style>
    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }
    .list {
    float: left;
    line-height: 20px;
    margin: 10px;
    min-width: 200px;
    }
</style>

@code{
    public List<Order> Orders { get; set; }
    SfGrid<Order> Grid;
    SfGrid<FoodStuff> FoodGrid;
    SfButton ToggleBtn;
    List<FoodStuff> Entities;

    private async Task OnToggleClick(MouseEventArgs args)
    {
        await Service.CreateAsync(new FoodstuffModel { Name = new Random().Next(0, 99999).ToString() });
        await Service.SaveAsync();
        await RefreshData();
    }

    private async Task RefreshData() => Entities = (await Service.GetAllAsync()).ToList();

    protected override async void OnInitialized()
    {
        await RefreshData();

        Orders = Enumerable.Range(1, 75).Select(x => new Order
        {
            OrderID = 1000 + x,
            CustomerID = new[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" }[new Random().Next(5)],
            Freight = 2.1 * x,
            OrderDate = DateTime.Now.AddDays(-x),
            ShipCountry = new[] { "USA", "UK", "CHINA", "RUSSIA", "INDIA" }[new Random().Next(5)]
        }).ToList();
    }

    public void ToolbarClick(ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")
        {
            Grid.ExcelExport();
        }
    }

    public class Order
    {
        public int? OrderID { get; set; }
        public string CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
        public string ShipCountry { get; set; }
    }

    private async Task DeleteSelectedRecords(MouseEventArgs obj)
    {
        foreach (var record in FoodGrid.SelectedRecords)
            await Service.DeleteAsync(record.Id);

        await Service.SaveAsync();
        await RefreshData();
    }

    private void ToolbarKlick(ClickEventArgs obj)
    {
        switch (obj.Item.Id)
        {
            
        }
    }

}